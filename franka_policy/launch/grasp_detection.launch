<launch>
  <arg name="arm_id" default="fr3" />

    <arg name="sim" default="false"/>
    <arg name="type" default="ours" />

        
    <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
        <arg name ="enable_pointcloud" value="true"/>
        <arg name="publish_tf" value="false"/>
        <arg name="depth_width" value="640"/>
        <arg name="depth_height" value="480"/>
        <arg name="depth_fps" value="10"/>
        <arg name="color_width" value="640"/>
        <arg name="color_height" value="480"/>
        <arg name="color_fps" value="10"/>
    </include>

    <node pkg="tf2_ros" type="static_transform_publisher" name="workspace"
    args="0.363 -0.007 -0.03    0 0 0 world workspace" />

    <node pkg="nodelet" type="nodelet" name="cropbox" args="load pcl/CropBox /camera/realsense2_camera_manager" output="screen">
     <remap from="~input" to="/camera/depth_registered/points" />
      <rosparam>
        min_x: 0
        max_x: 0.3 
        min_y: 0
        max_y: 0.3
        min_z: 0.055   <!-- # Filter rout table -->
        max_z: 0.3
        input_frame: workspace
        output_frame: workspace
      </rosparam>

    </node>
    

    <group if = "$(arg sim)">
        <include file="$(find panda_moveit_config)/launch/demo.launch" />
    </group>

    <group if = "$(eval type == 'ours')">
 
    <node pkg="franka_policy" name="grasp_detector" type="grasp_detection_ours.py" output="screen"> 
    </node>

    </group>

    <group if = "$(eval type == 'giga')">
    
        <node pkg="franka_policy" name="grasp_detector" type="grasp_detection_giga.py" output="screen"> 
        </node>

        
    </group>
      <node pkg="tf2_ros" type="static_transform_publisher" name="camdepthlink" args=" 0.015 0.000 -0.001 0.002 -0.001 0.000 1.000 camera_color_optical_frame camera_depth_optical_frame" />
      
    <!-- <arg name = "transmission" default="position" />
     
    <include file="$(find panda_moveit_config)/launch/demo.launch" pass_all_args="true">
     <arg name="load_robot_description" value="false"/>
     <arg name="moveit_controller_manager" value = "simple"/>
    </include> -->
    



  <!-- specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find panda_moveit_config)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- By default we will load the gripper -->
  <arg name="load_gripper" default="true" />

  <!-- By default, we will load or override the robot_description -->
  <arg name="load_robot_description" default="true"/>

  <!-- Choose controller manager: fake, simple, or ros_control -->
  <arg name="moveit_controller_manager" default="fake" />
  <!-- Set execution mode for fake execution controllers -->
  <arg name="fake_execution_type" default="interpolate" />
  <!-- Transmission used for joint control: position, velocity, or effort -->
  <arg name="transmission" />

  <!-- By default, hide joint_state_publisher's GUI in 'fake' controller_manager mode -->
  <arg name="use_gui" default="false" />
  <arg name="use_rviz" default="true" />
  <!-- Use rviz config for MoveIt tutorial -->
  <arg name="rviz_tutorial" default="false" />

  <!-- If needed, broadcast static tf for robot root -->
  <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_0" args="0 0 0 0 0 0 world $(arg arm_id)_link0" /> -->

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find panda_moveit_config)/launch/move_group.launch" pass_all_args="true">
    <arg name="allow_trajectory_execution" value="true" />
    <arg name="info" value="true" />
  </include>


    <!-- Load rviz config -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find franka_policy)/config/grasp.rviz" required="true" />

</launch>
